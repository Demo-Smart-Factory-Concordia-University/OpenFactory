# Runs a single broker Kafka cluster using KRaft mode
# Ref: https://developer.confluent.io/quickstart/kafka-docker/
#      https://github.com/confluentinc/cp-all-in-one/blob/7.5.0-post/cp-all-in-one-kraft/docker-compose.yml

services:
  broker:
    image: confluentinc/cp-server:7.7.0
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2QkhjfdKKFDdSML'
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-metadata:/var/lib/kafka/metadata
    networks:
      - factory-net
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.7.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      broker:
         condition: service_healthy
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'
      KSQL_KSQL_SERVICE_ID: ofa_
    healthcheck:
      test: nc -z localhost 8088 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - factory-net

  ksqldb-cli:
    # To run interactively:
    # docker exec -it ksqldb-cli ksql http://ksqldb-server:8088
    image: confluentinc/cp-ksqldb-cli:7.7.0
    container_name: ksqldb-cli
    depends_on:
      broker:
         condition: service_healthy
      ksqldb-server:
         condition: service_healthy
    environment:
      - KSQL_START_SCRIPTS=mtcdevices.sql
    volumes:
      - "./scripts:/home/appuser/scripts"
    entrypoint: bash -c "source ./scripts/start_ksql.sh; tail -F anything"
    tty: true
    networks:
      - factory-net

networks:
  factory-net:
    name: factory-net
    external: true

volumes:
  kafka-data:
  kafka-metadata:

#!/usr/bin/env python3
"""
Generate a static Bash completion script for the OpenFactory CLI (`ofa`).

Usage:
    # 1. Install your CLI so `ofa` is on your PATH:
    pip install -e .

    # 2. Generate (or regenerate) the completion file:
    python generate_ofa_completion.py > ~/.ofa_completion.sh

    # 3. In your ~/.bashrc (or ~/.profile), add:
    echo "source ~/.ofa_completion.sh" >> ~/.bashrc

    # 4. Reload your shell:
    source ~/.bashrc
"""

import click
from click import Path, File, Option
from openfactory.ofacli import cli


def takes_file(cmd: click.Command) -> bool:
    """ Detect if a command expects a file or folder argument """
    for p in cmd.params:
        if isinstance(p.type, (Path, File)):
            return True
    return False


def collect_flags(cmd: click.Command) -> list[str]:
    """ Collect short and long flags of a command """
    flags = []
    for p in cmd.params:
        if isinstance(p, Option):
            flags.extend(p.opts)
    return flags


def main():
    """ Generate the static Bash completion """
    top_cmds = list(cli.commands.keys()) + ["--help"]

    print("# Auto-generated by generate_ofa_completion.py")
    print("_ofa_static() {")
    print("  local cur=\"${COMP_WORDS[COMP_CWORD]}\"")
    print("  local cmd1=\"${COMP_WORDS[1]}\"")
    print("  local cmd2=\"${COMP_WORDS[2]}\"")
    print()

    # Top-level
    print("  if [[ $COMP_CWORD -eq 1 ]]; then")
    print("    COMPREPLY=( $(compgen -W \"%s\" -- \"$cur\") )" % " ".join(top_cmds))
    print("    return 0")
    print("  fi")
    print()

    # Now based on the first word
    print("  case \"$cmd1\" in")
    for grp_name, grp in cli.commands.items():
        if not isinstance(grp, click.Group):
            continue

        subs = list(grp.commands.keys())
        grp_flags = collect_flags(grp)

        print(f"    {grp_name})")
        print("        if [[ $COMP_CWORD -eq 2 ]]; then")
        print("            if [[ \"$cur\" == -* ]]; then")
        print("                COMPREPLY=( $(compgen -W \"%s\" -- \"$cur\") )" %
              " ".join(grp_flags + ["--help"]))
        print("            else")
        print("                COMPREPLY=( $(compgen -W \"%s\" -- \"$cur\") )" %
              " ".join(subs))
        print("            fi")
        print("            return 0")
        print("        fi")

        print("        case \"$cmd2\" in")
        for sub_name, sub_cmd in grp.commands.items():
            sub_flags = collect_flags(sub_cmd)

            print(f"            {sub_name})")
            if takes_file(sub_cmd):
                print("                if [[ \"$cur\" == -* ]]; then")
                print("                    COMPREPLY=( $(compgen -W \"%s\" -- \"$cur\") )" %
                      " ".join(sub_flags))
                print("                else")
                print("                    COMPREPLY=( $(compgen -f -- \"$cur\") )")
                print("                    compopt -o filenames")
                print("                fi")
            elif sub_flags:
                print("                if [[ \"$cur\" == -* ]]; then")
                print("                    COMPREPLY=( $(compgen -W \"%s\" -- \"$cur\") )" %
                      " ".join(sub_flags))
                print("                else")
                print("                    COMPREPLY=()")
                print("                fi")
            else:
                print("                COMPREPLY=()")
            print("                return 0")
            print("                ;;")
        print("        esac")

        print("        ;;")
    print("    *)")
    print("        COMPREPLY=()")
    print("        ;;")
    print("  esac")

    print("  return 0")
    print("}")
    print()
    print("complete -F _ofa_static ofa")


if __name__ == "__main__":
    main()
